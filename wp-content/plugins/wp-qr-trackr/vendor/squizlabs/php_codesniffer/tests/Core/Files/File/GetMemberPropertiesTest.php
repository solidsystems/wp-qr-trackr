<?php
/**
 * Tests for the \PHP_CodeSniffer\Files\File::getMemberProperties method.
 *
 * @author    Greg Sherwood <gsherwood@squiz.net>
 * @copyright 2006-2015 Squiz Pty Ltd (ABN 77 084 670 600)
 * @license   https://github.com/PHPCSStandards/PHP_CodeSniffer/blob/master/licence.txt BSD Licence
 */

namespace PHP_CodeSniffer\Tests\Core\Files\File;

use PHP_CodeSniffer\Tests\Core\AbstractMethodUnitTest;

/**
 * Tests for the \PHP_CodeSniffer\Files\File::getMemberProperties method.
 *
 * @covers \PHP_CodeSniffer\Files\File::getMemberProperties
 */
final class GetMemberPropertiesTest extends AbstractMethodUnitTest {



	/**
	 * Test the getMemberProperties() method.
	 *
	 * @param string                         $identifier Comment which precedes the test case.
	 * @param array<string, string|int|bool> $expected   Expected function output.
	 *
	 * @dataProvider dataGetMemberProperties
	 *
	 * @return void
	 */
	public function testGetMemberProperties( $identifier, $expected ) {
		$variable = $this->getTargetToken( $identifier, T_VARIABLE );
		$result   = self::$phpcsFile->getMemberProperties( $variable );

		// Convert offsets to absolute positions in the token stream.
		if ( isset( $expected['type_token'] ) === true && is_int( $expected['type_token'] ) === true ) {
			$expected['type_token'] += $variable;
		}

		if ( isset( $expected['type_end_token'] ) === true && is_int( $expected['type_end_token'] ) === true ) {
			$expected['type_end_token'] += $variable;
		}

		$this->assertSame( $expected, $result );
	}//end testGetMemberProperties()


	/**
	 * Data provider for the GetMemberProperties test.
	 *
	 * Note: the `expected - type_token` and `expected - type_end_token` indexes should
	 * contain either `false` (no type) or the _offset_ of the type start/end token in
	 * relation to the `T_VARIABLE` token which is passed to the getMemberProperties() method.
	 *
	 * @see testGetMemberProperties()
	 *
	 * @return array<string, array<string|array<string, string|int|bool>>>
	 */
	public static function dataGetMemberProperties() {
		return array(
			'var-modifier'                                => array(
				'identifier' => '/* testVar */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => false,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'var-modifier-and-type'                       => array(
				'identifier' => '/* testVarType */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => false,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '?int',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => true,
				),
			),
			'public-modifier'                             => array(
				'identifier' => '/* testPublic */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'public-modifier-and-type'                    => array(
				'identifier' => '/* testPublicType */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'string',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'protected-modifier'                          => array(
				'identifier' => '/* testProtected */',
				'expected'   => array(
					'scope'           => 'protected',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'protected-modifier-and-type'                 => array(
				'identifier' => '/* testProtectedType */',
				'expected'   => array(
					'scope'           => 'protected',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'bool',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'private-modifier'                            => array(
				'identifier' => '/* testPrivate */',
				'expected'   => array(
					'scope'           => 'private',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'private-modifier-and-type'                   => array(
				'identifier' => '/* testPrivateType */',
				'expected'   => array(
					'scope'           => 'private',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'array',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'static-modifier'                             => array(
				'identifier' => '/* testStatic */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => false,
					'set_scope'       => false,
					'is_static'       => true,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'static-modifier-and-type'                    => array(
				'identifier' => '/* testStaticType */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => false,
					'set_scope'       => false,
					'is_static'       => true,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '?string',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => true,
				),
			),
			'static-and-var-modifier'                     => array(
				'identifier' => '/* testStaticVar */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => false,
					'set_scope'       => false,
					'is_static'       => true,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'var-and-static-modifier'                     => array(
				'identifier' => '/* testVarStatic */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => false,
					'set_scope'       => false,
					'is_static'       => true,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'public-static-modifiers'                     => array(
				'identifier' => '/* testPublicStatic */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => true,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'protected-static-modifiers'                  => array(
				'identifier' => '/* testProtectedStatic */',
				'expected'   => array(
					'scope'           => 'protected',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => true,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'private-static-modifiers'                    => array(
				'identifier' => '/* testPrivateStatic */',
				'expected'   => array(
					'scope'           => 'private',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => true,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'no-modifier'                                 => array(
				'identifier' => '/* testNoPrefix */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => false,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'public-and-static-modifier-with-docblock'    => array(
				'identifier' => '/* testPublicStaticWithDocblock */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => true,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'protected-and-static-modifier-with-docblock' => array(
				'identifier' => '/* testProtectedStaticWithDocblock */',
				'expected'   => array(
					'scope'           => 'protected',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => true,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'private-and-static-modifier-with-docblock'   => array(
				'identifier' => '/* testPrivateStaticWithDocblock */',
				'expected'   => array(
					'scope'           => 'private',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => true,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'property-group-simple-type-prop-1'           => array(
				'identifier' => '/* testGroupType 1 */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'float',
					'type_token'      => -6,
					'type_end_token'  => -6,
					'nullable_type'   => false,
				),
			),
			'property-group-simple-type-prop-2'           => array(
				'identifier' => '/* testGroupType 2 */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'float',
					'type_token'      => -13,
					'type_end_token'  => -13,
					'nullable_type'   => false,
				),
			),
			'property-group-nullable-type-prop-1'         => array(
				'identifier' => '/* testGroupNullableType 1 */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => true,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '?string',
					'type_token'      => -6,
					'type_end_token'  => -6,
					'nullable_type'   => true,
				),
			),
			'property-group-nullable-type-prop-2'         => array(
				'identifier' => '/* testGroupNullableType 2 */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => true,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '?string',
					'type_token'      => -17,
					'type_end_token'  => -17,
					'nullable_type'   => true,
				),
			),
			'property-group-protected-static-prop-1'      => array(
				'identifier' => '/* testGroupProtectedStatic 1 */',
				'expected'   => array(
					'scope'           => 'protected',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => true,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'property-group-protected-static-prop-2'      => array(
				'identifier' => '/* testGroupProtectedStatic 2 */',
				'expected'   => array(
					'scope'           => 'protected',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => true,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'property-group-protected-static-prop-3'      => array(
				'identifier' => '/* testGroupProtectedStatic 3 */',
				'expected'   => array(
					'scope'           => 'protected',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => true,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'property-group-private-prop-1'               => array(
				'identifier' => '/* testGroupPrivate 1 */',
				'expected'   => array(
					'scope'           => 'private',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'property-group-private-prop-2'               => array(
				'identifier' => '/* testGroupPrivate 2 */',
				'expected'   => array(
					'scope'           => 'private',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'property-group-private-prop-3'               => array(
				'identifier' => '/* testGroupPrivate 3 */',
				'expected'   => array(
					'scope'           => 'private',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'property-group-private-prop-4'               => array(
				'identifier' => '/* testGroupPrivate 4 */',
				'expected'   => array(
					'scope'           => 'private',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'property-group-private-prop-5'               => array(
				'identifier' => '/* testGroupPrivate 5 */',
				'expected'   => array(
					'scope'           => 'private',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'property-group-private-prop-6'               => array(
				'identifier' => '/* testGroupPrivate 6 */',
				'expected'   => array(
					'scope'           => 'private',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'property-group-private-prop-7'               => array(
				'identifier' => '/* testGroupPrivate 7 */',
				'expected'   => array(
					'scope'           => 'private',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'messy-nullable-type'                         => array(
				'identifier' => '/* testMessyNullableType */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '?array',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => true,
				),
			),
			'fqn-type'                                    => array(
				'identifier' => '/* testNamespaceType */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '\MyNamespace\MyClass',
					'type_token'      => -5,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'nullable-classname-type'                     => array(
				'identifier' => '/* testNullableNamespaceType 1 */',
				'expected'   => array(
					'scope'           => 'private',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '?ClassName',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => true,
				),
			),
			'nullable-namespace-relative-class-type'      => array(
				'identifier' => '/* testNullableNamespaceType 2 */',
				'expected'   => array(
					'scope'           => 'protected',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '?Folder\ClassName',
					'type_token'      => -4,
					'type_end_token'  => -2,
					'nullable_type'   => true,
				),
			),
			'multiline-namespaced-type'                   => array(
				'identifier' => '/* testMultilineNamespaceType */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '\MyNamespace\MyClass\Foo',
					'type_token'      => -18,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'property-after-method'                       => array(
				'identifier' => '/* testPropertyAfterMethod */',
				'expected'   => array(
					'scope'           => 'private',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => true,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'invalid-property-in-interface'               => array(
				'identifier' => '/* testInterfaceProperty */',
				'expected'   => array(),
			),
			'property-in-nested-class-1'                  => array(
				'identifier' => '/* testNestedProperty 1 */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'property-in-nested-class-2'                  => array(
				'identifier' => '/* testNestedProperty 2 */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'php8-mixed-type'                             => array(
				'identifier' => '/* testPHP8MixedTypeHint */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => true,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'miXed',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8-nullable-mixed-type'                    => array(
				'identifier' => '/* testPHP8MixedTypeHintNullable */',
				'expected'   => array(
					'scope'           => 'private',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '?mixed',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => true,
				),
			),
			'namespace-operator-type-declaration'         => array(
				'identifier' => '/* testNamespaceOperatorTypeHint */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '?namespace\Name',
					'type_token'      => -4,
					'type_end_token'  => -2,
					'nullable_type'   => true,
				),
			),
			'php8-union-types-simple'                     => array(
				'identifier' => '/* testPHP8UnionTypesSimple */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'int|float',
					'type_token'      => -4,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8-union-types-two-classes'                => array(
				'identifier' => '/* testPHP8UnionTypesTwoClasses */',
				'expected'   => array(
					'scope'           => 'private',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'MyClassA|\Package\MyClassB',
					'type_token'      => -7,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8-union-types-all-base-types'             => array(
				'identifier' => '/* testPHP8UnionTypesAllBaseTypes */',
				'expected'   => array(
					'scope'           => 'protected',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'array|bool|int|float|NULL|object|string',
					'type_token'      => -14,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8-union-types-all-pseudo-types'           => array(
				'identifier' => '/* testPHP8UnionTypesAllPseudoTypes */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => false,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'false|mixed|self|parent|iterable|Resource',
					'type_token'      => -12,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8-union-types-illegal-types'              => array(
				'identifier' => '/* testPHP8UnionTypesIllegalTypes */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					// Missing static, but that's OK as not an allowed syntax.
					'type'            => 'callable|void',
					'type_token'      => -4,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8-union-types-nullable'                   => array(
				'identifier' => '/* testPHP8UnionTypesNullable */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '?int|float',
					'type_token'      => -4,
					'type_end_token'  => -2,
					'nullable_type'   => true,
				),
			),
			'php8-union-types-pseudo-type-null'           => array(
				'identifier' => '/* testPHP8PseudoTypeNull */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'null',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8-union-types-pseudo-type-false'          => array(
				'identifier' => '/* testPHP8PseudoTypeFalse */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'false',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8-union-types-pseudo-type-false-and-bool' => array(
				'identifier' => '/* testPHP8PseudoTypeFalseAndBool */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'bool|FALSE',
					'type_token'      => -4,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8-union-types-object-and-class'           => array(
				'identifier' => '/* testPHP8ObjectAndClass */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'object|ClassName',
					'type_token'      => -4,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8-union-types-pseudo-type-iterable-and-array' => array(
				'identifier' => '/* testPHP8PseudoTypeIterableAndArray */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'iterable|array|Traversable',
					'type_token'      => -6,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8-union-types-duplicate-type-with-whitespace-and-comments' => array(
				'identifier' => '/* testPHP8DuplicateTypeInUnionWhitespaceAndComment */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'int|string|INT',
					'type_token'      => -10,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.1-readonly-property'                    => array(
				'identifier' => '/* testPHP81Readonly */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => true,
					'is_final'        => false,
					'type'            => 'int',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.1-readonly-property-with-nullable-type' => array(
				'identifier' => '/* testPHP81ReadonlyWithNullableType */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => true,
					'is_final'        => false,
					'type'            => '?array',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => true,
				),
			),
			'php8.1-readonly-property-with-union-type'    => array(
				'identifier' => '/* testPHP81ReadonlyWithUnionType */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => true,
					'is_final'        => false,
					'type'            => 'string|int',
					'type_token'      => -4,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.1-readonly-property-with-union-type-with-null' => array(
				'identifier' => '/* testPHP81ReadonlyWithUnionTypeWithNull */',
				'expected'   => array(
					'scope'           => 'protected',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => true,
					'is_final'        => false,
					'type'            => 'string|null',
					'type_token'      => -4,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.1-readonly-property-with-union-type-no-visibility' => array(
				'identifier' => '/* testPHP81OnlyReadonlyWithUnionType */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => false,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => true,
					'is_final'        => false,
					'type'            => 'string|int',
					'type_token'      => -4,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.1-readonly-property-with-multi-union-type-no-visibility' => array(
				'identifier' => '/* testPHP81OnlyReadonlyWithUnionTypeMultiple */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => false,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => true,
					'is_final'        => false,
					'type'            => '\InterfaceA|\Sub\InterfaceB|false',
					'type_token'      => -11,
					'type_end_token'  => -3,
					'nullable_type'   => false,
				),
			),
			'php8.1-readonly-and-static-property'         => array(
				'identifier' => '/* testPHP81ReadonlyAndStatic */',
				'expected'   => array(
					'scope'           => 'private',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => true,
					'is_readonly'     => true,
					'is_final'        => false,
					'type'            => '?string',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => true,
				),
			),
			'php8.1-readonly-mixed-case-keyword'          => array(
				'identifier' => '/* testPHP81ReadonlyMixedCase */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => true,
					'is_readonly'     => true,
					'is_final'        => false,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'php8-property-with-single-attribute'         => array(
				'identifier' => '/* testPHP8PropertySingleAttribute */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'string',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8-property-with-multiple-attributes'      => array(
				'identifier' => '/* testPHP8PropertyMultipleAttributes */',
				'expected'   => array(
					'scope'           => 'protected',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '?int|float',
					'type_token'      => -4,
					'type_end_token'  => -2,
					'nullable_type'   => true,
				),
			),
			'php8-property-with-multiline-attribute'      => array(
				'identifier' => '/* testPHP8PropertyMultilineAttribute */',
				'expected'   => array(
					'scope'           => 'private',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'mixed',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'invalid-property-in-enum'                    => array(
				'identifier' => '/* testEnumProperty */',
				'expected'   => array(),
			),
			'php8.1-single-intersection-type'             => array(
				'identifier' => '/* testPHP81IntersectionTypes */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'Foo&Bar',
					'type_token'      => -4,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.1-multi-intersection-type'              => array(
				'identifier' => '/* testPHP81MoreIntersectionTypes */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'Foo&Bar&Baz',
					'type_token'      => -6,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.1-illegal-intersection-type'            => array(
				'identifier' => '/* testPHP81IllegalIntersectionTypes */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'int&string',
					'type_token'      => -4,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.1-nullable-intersection-type'           => array(
				'identifier' => '/* testPHP81NullableIntersectionType */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '?Foo&Bar',
					'type_token'      => -4,
					'type_end_token'  => -2,
					'nullable_type'   => true,
				),
			),

			'php8.0-union-type-with-whitespace-and-comment' => array(
				'identifier' => '/* testUnionTypeWithWhitespaceAndComment */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'int|string',
					'type_token'      => -8,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.1-intersection-type-with-whitespace-and-comment' => array(
				'identifier' => '/* testIntersectionTypeWithWhitespaceAndComment */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '\Foo&Bar',
					'type_token'      => -9,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.2-pseudo-type-true'                     => array(
				'identifier' => '/* testPHP82PseudoTypeTrue */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'true',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.2-pseudo-type-true-nullable'            => array(
				'identifier' => '/* testPHP82NullablePseudoTypeTrue */',
				'expected'   => array(
					'scope'           => 'protected',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => true,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '?true',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => true,
				),
			),
			'php8.2-pseudo-type-true-in-union'            => array(
				'identifier' => '/* testPHP82PseudoTypeTrueInUnion */',
				'expected'   => array(
					'scope'           => 'private',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'int|string|true',
					'type_token'      => -6,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.2-pseudo-type-invalid-true-false-union' => array(
				'identifier' => '/* testPHP82PseudoTypeFalseAndTrue */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => false,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => true,
					'is_final'        => false,
					'type'            => 'true|FALSE',
					'type_token'      => -4,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),

			'php8.2-dnf-with-static'                      => array(
				'identifier' => '/* testPHP82DNFTypeStatic */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => true,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '(Foo&\Bar)|bool',
					'type_token'      => -9,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.2-dnf-with-readonly-1'                  => array(
				'identifier' => '/* testPHP82DNFTypeReadonlyA */',
				'expected'   => array(
					'scope'           => 'protected',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => true,
					'is_final'        => false,
					'type'            => 'float|(Partially\Qualified&Traversable)',
					'type_token'      => -10,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.2-dnf-with-readonly-2'                  => array(
				'identifier' => '/* testPHP82DNFTypeReadonlyB */',
				'expected'   => array(
					'scope'           => 'private',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => true,
					'is_final'        => false,
					'type'            => '(namespace\Foo&Bar)|string',
					'type_token'      => -10,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.2-dnf-with-illegal-nullable'            => array(
				'identifier' => '/* testPHP82DNFTypeIllegalNullable */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => false,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '?(A&\Pck\B)|bool',
					'type_token'      => -11,
					'type_end_token'  => -2,
					'nullable_type'   => true,
				),
			),
			'php8.4-final-public-property'                => array(
				'identifier' => '/* testPHP84FinalPublicTypedProp */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => true,
					'type'            => 'string',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.4-final-protected-property'             => array(
				'identifier' => '/* testPHP84FinalProtectedTypedProp */',
				'expected'   => array(
					'scope'           => 'protected',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => true,
					'type'            => 'string',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.4-final-middle-keyword-property'        => array(
				'identifier' => '/* testPHP84FinalMiddleTypedProp */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => true,
					'type'            => 'string',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.4-final-middle-keyword-static-property' => array(
				'identifier' => '/* testPHP84FinalMiddleStaticTypedProp */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => true,
					'is_readonly'     => false,
					'is_final'        => true,
					'type'            => 'string',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.4-final-last-keyword-property'          => array(
				'identifier' => '/* testPHP84FinalLastTypedProp */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => true,
					'is_final'        => true,
					'type'            => 'string',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.4-final-implicit-public-typed-property' => array(
				'identifier' => '/* testPHP84FinalImplicitVisibilityTypedProp */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => false,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => true,
					'type'            => 'string',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.4-final-implicit-public-untyped-property' => array(
				'identifier' => '/* testPHP84FinalImplicitVisibilityProp */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => false,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => true,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'php8.4-final-public-nullable-typed-property' => array(
				'identifier' => '/* testPHP84FinalNullableTypedProp */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => true,
					'type'            => '?string',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => true,
				),
			),
			'php8.4-final-public-complex-type-property'   => array(
				'identifier' => '/* testPHP84FinalComplexTypedProp */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => false,
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => true,
					'type'            => '(Foo&\Bar)|bool',
					'type_token'      => -9,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),

			'php8.4-asym-public-set'                      => array(
				'identifier' => '/* testPHP84AsymPublicSetProperty */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => false,
					'set_scope'       => 'public',
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'mixed',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.4-asym-public-public-set-dnf-type'      => array(
				'identifier' => '/* testPHP84AsymPublicPublicSetProperty */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => 'public',
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '(A&B)|null',
					'type_token'      => -8,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.4-asym-public-set-public'               => array(
				'identifier' => '/* testPHP84AsymPublicSetPublicProperty */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => 'public',
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'bool',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.4-asym-protected-set-readonly'          => array(
				'identifier' => '/* testPHP84AsymProtectedSetProperty */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => false,
					'set_scope'       => 'protected',
					'is_static'       => false,
					'is_readonly'     => true,
					'is_final'        => false,
					'type'            => 'mixed',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.4-asym-public-protected-set'            => array(
				'identifier' => '/* testPHP84AsymPublicProtectedSetProperty */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => 'protected',
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'string',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.4-asym-protected-set-public-nullable-type' => array(
				'identifier' => '/* testPHP84AsymProtectedSetPublicProperty */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => 'protected',
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => '?float',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => true,
				),
			),
			'php8.4-asym-private-set-union-type'          => array(
				'identifier' => '/* testPHP84AsymPrivateSetProperty */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => false,
					'set_scope'       => 'private',
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'string|int',
					'type_token'      => -4,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.4-asym-final-protected-private-set'     => array(
				'identifier' => '/* testPHP84AsymProtectedPrivateSetProperty */',
				'expected'   => array(
					'scope'           => 'protected',
					'scope_specified' => true,
					'set_scope'       => 'private',
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => true,
					'type'            => '',
					'type_token'      => false,
					'type_end_token'  => false,
					'nullable_type'   => false,
				),
			),
			'php8.4-asym-private-set-public'              => array(
				'identifier' => '/* testPHP84AsymPrivateSetPublicProperty */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => 'private',
					'is_static'       => false,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'mixed',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
			'php8.4-illegal-asym-public-protected-set-static' => array(
				'identifier' => '/* testPHP84IllegalAsymPublicProtectedSetStaticProperty */',
				'expected'   => array(
					'scope'           => 'public',
					'scope_specified' => true,
					'set_scope'       => 'protected',
					'is_static'       => true,
					'is_readonly'     => false,
					'is_final'        => false,
					'type'            => 'mixed',
					'type_token'      => -2,
					'type_end_token'  => -2,
					'nullable_type'   => false,
				),
			),
		);
	}//end dataGetMemberProperties()


	/**
	 * Test receiving an expected exception when a non property is passed.
	 *
	 * @param string $identifier Comment which precedes the test case.
	 *
	 * @dataProvider dataNotClassProperty
	 *
	 * @return void
	 */
	public function testNotClassPropertyException( $identifier ) {
		$this->expectRunTimeException( '$stackPtr is not a class member var' );

		$variable = $this->getTargetToken( $identifier, T_VARIABLE );
		self::$phpcsFile->getMemberProperties( $variable );
	}//end testNotClassPropertyException()


	/**
	 * Data provider for the NotClassPropertyException test.
	 *
	 * @see testNotClassPropertyException()
	 *
	 * @return array<string, array<string>>
	 */
	public static function dataNotClassProperty() {
		return array(
			'method parameter'                     => array( '/* testMethodParam */' ),
			'variable import using global keyword' => array( '/* testImportedGlobal */' ),
			'function local variable'              => array( '/* testLocalVariable */' ),
			'global variable'                      => array( '/* testGlobalVariable */' ),
			'method parameter in anon class nested in ternary' => array( '/* testNestedMethodParam 1 */' ),
			'method parameter in anon class nested in function call' => array( '/* testNestedMethodParam 2 */' ),
			'method parameter in enum'             => array( '/* testEnumMethodParamNotProperty */' ),
		);
	}//end dataNotClassProperty()


	/**
	 * Test receiving an expected exception when a non variable is passed.
	 *
	 * @return void
	 */
	public function testNotAVariableException() {
		$this->expectRunTimeException( '$stackPtr must be of type T_VARIABLE' );

		$next = $this->getTargetToken( '/* testNotAVariable */', T_RETURN );
		self::$phpcsFile->getMemberProperties( $next );
	}//end testNotAVariableException()
}//end class
