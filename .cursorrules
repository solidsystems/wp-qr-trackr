# WordPress Plugin Development Standards
- All plugins are developed with professional WordPress best practices and excellent security standards.
- Functionality is implemented in an elegant, maintainable, and efficient manner.
- Debug logging is available upon request and should be implemented where appropriate.
- UI styling for both generator functions and wp-admin panes must be mobile-first, ensuring optimal experience on all devices.

# Modular Setup Considerations
- Major plugin logic should be separated into modules (e.g., admin, AJAX, rewrite, debug, utility) under an `includes/` directory.
- The main plugin file should only bootstrap and require these modules, not contain business logic.
- Each module should register its own hooks and handle a single concern (separation of concerns).
- When adding new features, create a new module and require it in the main file.
- Modularization improves maintainability, scalability, testability, and aligns with WordPress best practices.
- Document the purpose of each module in the README and keep module boundaries clear.

# Contribution Workflow Standards
- Every code change or new feature must be accompanied by updated documentation (e.g., README.md, inline comments).
- All changes must be made on a feature branch and submitted via a pull request (PR) before merging to main.
- PRs should not be merged unless documentation is up to date and reviewed.

# Environment Variable Standards
- Every time a new environment variable is added to provide dependencies or flexibility, the .env.example file must be updated to reflect the change.

# Xdebug/PECL Homebrew Fix
- Always run fix-pecl-xdebug.sh as part of the standard macOS (ARM and x86) setup to ensure Xdebug can be installed reliably with Homebrew PHP and PECL. This resolves symlink and permission issues common to both architectures.

# PR Review Automation
- Every pull request must include a summary comment detailing documentation and technical changes. If automated, use a one-line command with escaped newlines for the GitHub CLI (gh pr comment) to ensure proper formatting.

# Cursor Project Rules

# Linter Memory Limit
linter_max_memory_mb = 1024  # Set linter max memory to 1GB (1024MB) instead of the default 512MB for this project.

# WordPress PHP Indentation Rule
All PHP files (except inline alignment in arrays/comments) must use tabs for indentation, not spaces. This is especially important for WordPress plugins.

# Cursor Project Rules: WordPress Plugin Coding Standards (Enforced)

# Security & Input Handling
- All user input (e.g., $_POST, $_GET, $_SERVER) must be sanitized using wp_unslash() and the appropriate WordPress sanitization function (sanitize_text_field, esc_url_raw, intval, etc.) before use.
- Never use raw superglobals in business logic or output.

# Output Escaping
- All output (HTML, attributes, URLs, translations, etc.) must be escaped using esc_html(), esc_url(), esc_attr(), or similar before rendering to the browser.

# Yoda Conditions
- All conditionals must use Yoda conditions and strict comparison (===, !==) where possible.

# Comment Punctuation
- All inline comments must end in a period, exclamation mark, or question mark.

# Docblocks
- All functions, classes, and files must have complete docblocks describing their purpose, parameters, and return values.

# WordPress Standards
- Use gmdate() instead of date() for timezone safety.
- Use wp_json_encode() instead of json_encode() for outputting JSON.
- Add PHPCS ignore comments for direct DB calls or debug-only error_log() only if absolutely necessary and document why.
- All enqueued assets must have resource versioning for cache busting.

# PHPCS & CI/CD
- All code must pass PHPCS with the project .phpcs.xml before merging.
- All code must pass CI/CD checks in GitHub Actions before merging.

# Review & Automation
- PR reviewers must check for these standards before approving.
- Automated tools and pre-commit hooks should enforce these rules where possible. 